[
    {
        "id": "e8d61f6023d7a7ef",
        "type": "tab",
        "label": "YT Extractor Flow",
        "disabled": false,
        "info": ""
    },
    {
        "id": "586b85bdd9dedd5a",
        "type": "http in",
        "z": "e8d61f6023d7a7ef",
        "name": "Serve HTML",
        "url": "/yt-extractor",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 180,
        "wires": [
            [
                "d3d9e6d68cbd4816"
            ]
        ]
    },
    {
        "id": "d3d9e6d68cbd4816",
        "type": "template",
        "z": "e8d61f6023d7a7ef",
        "name": "HTML with Vue.js & Vuetify",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "plain",
        "template": "<!DOCTYPE html>\n<html>\n<head>\n  <title>YT Extractor</title>\n  <script src=\"https://cdn.jsdelivr.net/npm/vue@2\"></script>\n  <script src=\"https://cdn.jsdelivr.net/npm/vuetify@2.6.5/dist/vuetify.js\"></script>\n  <link href=\"https://cdn.jsdelivr.net/npm/vuetify@2.6.5/dist/vuetify.min.css\" rel=\"stylesheet\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <style>\n    body {\n      margin: 0;\n      padding: 0;\n      font-family: Arial, sans-serif;\n    }\n    #app {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      flex-direction: column;\n      min-height: 100vh;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"app\">\n    <v-app>\n      <v-container>\n        <h1 class=\"text-center\">YT Extractor</h1>\n\n        <v-row justify=\"center\" class=\"mt-3\">\n          <v-col cols=\"12\" md=\"8\" lg=\"6\">\n            <v-text-field\n              v-model=\"inputText\"\n              label=\"Enter youtube link\"\n              placeholder=\"Enter youtube link\"\n              outlined\n              dense\n            ></v-text-field>\n          </v-col>\n          <v-btn color=\"primary\" class=\"ml-2\" @click=\"sanitizeInput\">Start!</v-btn>\n        </v-row>\n\n        <v-row justify=\"center\" class=\"mt-5\">\n          <h2>Sanitized input:</h2>\n        </v-row>\n\n        <v-row justify=\"center\" class=\"mt-2\">\n          <v-col cols=\"12\" md=\"8\" lg=\"6\">\n            <v-card class=\"pa-2\" outlined>\n              <div>{{ sanitizedResult }}</div>\n            </v-card>\n          </v-col>\n        </v-row>\n      </v-container>\n    </v-app>\n  </div>\n\n  <script>\n    const app = new Vue({\n      el: '#app',\n      vuetify: new Vuetify(),\n      data() {\n        return {\n          inputText: '',\n          sanitizedResult: ''\n        };\n      },\n      methods: {\n        sanitizeInput() {\n          // Send input to Node-RED backend for sanitization\n          fetch('/sanitize-input', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ input: this.inputText })\n          })\n            .then(response => response.json())\n            .then(data => {\n              this.sanitizedResult = data.sanitized;\n            })\n            .catch(error => {\n              this.sanitizedResult = \"Error processing input!\";\n              console.error('Error:', error);\n            });\n        }\n      }\n    });\n  </script>\n</body>\n</html>",
        "output": "str",
        "x": 330,
        "y": 180,
        "wires": [
            [
                "85f626df5a636bf2"
            ]
        ]
    },
    {
        "id": "85f626df5a636bf2",
        "type": "http response",
        "z": "e8d61f6023d7a7ef",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 530,
        "y": 180,
        "wires": []
    },
    {
        "id": "a7c02e0d68c6d038",
        "type": "http in",
        "z": "e8d61f6023d7a7ef",
        "name": "Sanitize Input",
        "url": "/sanitize-input",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 320,
        "wires": [
            [
                "75d96e73098be0bc"
            ]
        ]
    },
    {
        "id": "75d96e73098be0bc",
        "type": "function",
        "z": "e8d61f6023d7a7ef",
        "name": "Sanitize Input Logic",
        "func": "// Sanitize the input to prevent malicious code execution\nconst unsanitizedInput = msg.payload.input;\nconst sanitizedInput = unsanitizedInput\n  .replace(/[^a-zA-Z0-9:\\/._?&=-]/g, '') // Allow only safe characters\n  .trim();\n\n// Return sanitized input\nmsg.payload = {\n    sanitized: sanitizedInput\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 360,
        "y": 320,
        "wires": [
            [
                "cd70dfcc5dabebaf"
            ]
        ]
    },
    {
        "id": "cd70dfcc5dabebaf",
        "type": "http response",
        "z": "e8d61f6023d7a7ef",
        "name": "Send Sanitized Input",
        "statusCode": "",
        "headers": {},
        "x": 540,
        "y": 320,
        "wires": []
    }
]