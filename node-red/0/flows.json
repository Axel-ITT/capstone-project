[
    {
        "id": "1b4a4c28bfa23ee8",
        "type": "tab",
        "label": "Games Flow",
        "disabled": false,
        "info": ""
    },
    {
        "id": "352a9831f5c32eda",
        "type": "http in",
        "z": "1b4a4c28bfa23ee8",
        "name": "Homepage (Games)",
        "url": "/games",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 80,
        "wires": [
            [
                "73d85a72b8e324c6"
            ]
        ]
    },
    {
        "id": "73d85a72b8e324c6",
        "type": "template",
        "z": "1b4a4c28bfa23ee8",
        "name": "Homepage Template",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Games</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n            height: 100vh;\n            margin: 0;\n            background-color: #f4f4f4;\n        }\n        h1 {\n            margin-bottom: 30px;\n        }\n        button {\n            display: block;\n            width: 200px;\n            padding: 10px;\n            margin: 10px;\n            font-size: 18px;\n            cursor: pointer;\n            border: none;\n            border-radius: 5px;\n            background-color: #007bff;\n            color: white;\n        }\n        button:hover {\n            background-color: #0056b3;\n        }\n    </style>\n</head>\n<body>\n    <h1>Games</h1>\n    <h3 id=\"az\">AZ:us-west-2a</h3>\n    <button onclick=\"window.location.href='/snake-game'\">Snake Game</button>\n    <button onclick=\"window.location.href='/load-game'\">Load Game</button>\n</body>\n</html>",
        "x": 370,
        "y": 80,
        "wires": [
            [
                "65a6bace94b04229"
            ]
        ]
    },
    {
        "id": "65a6bace94b04229",
        "type": "http response",
        "z": "1b4a4c28bfa23ee8",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 600,
        "y": 80,
        "wires": []
    },
    {
        "id": "14c52c17adb40196",
        "type": "http in",
        "z": "1b4a4c28bfa23ee8",
        "name": "Snake Page",
        "url": "/snake-game",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 180,
        "wires": [
            [
                "cde46634c7178c83"
            ]
        ]
    },
    {
        "id": "cde46634c7178c83",
        "type": "template",
        "z": "1b4a4c28bfa23ee8",
        "name": "snake template",
        "field": "payload",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>2048 Game</title>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/hammer.js/1.0.6/hammer.min.js\"></script>\n    <style>\n        body {\n        text-align:center;\n        font-family: helvetica;\n        }\n        canvas {\n        border: 2px solid rgb(151, 149, 149);\n        }\n    </style>\n</head>\n<body>\n<h3>Simple Snake Game</h3>\n<canvas id=\"stage\" height=\"400\" width=\"520\"></canvas>\n    <script type=\"module\">\n/**\n* Namespace\n*/\nvar Game = Game || {};\nvar Keyboard = Keyboard || {};\nvar Component = Component || {};\n\n/**\n* Keyboard Map\n*/\nKeyboard.Keymap = {\n37: 'left',\n38: 'up',\n39: 'right',\n40: 'down'\n};\n\n/**\n* Keyboard Events\n*/\nKeyboard.ControllerEvents = function () {\n\n    // Setts\n    var self = this;\n    this.pressKey = null;\n    this.keymap = Keyboard.Keymap;\n    \n    // Keydown Event\n    document.onkeydown = function (event) {\n    self.pressKey = event.which;\n    };\n    \n    // Get Key\n    this.getKey = function () {\n    return this.keymap[this.pressKey];\n    };\n};\n\n/**\n* Game Component Stage\n*/\nComponent.Stage = function (canvas, conf) {\n\n// Sets\nthis.keyEvent = new Keyboard.ControllerEvents();\nthis.width = canvas.width;\nthis.height = canvas.height;\nthis.length = [];\nthis.food = {};\nthis.score = 0;\nthis.direction = 'right';\nthis.conf = {\ncw: 10,\nsize: 5,\nfps: 1000\n};\n\n// Merge Conf\nif (typeof conf == 'object') {\nfor (var key in conf) {\nif (conf.hasOwnProperty(key)) {\nthis.conf[key] = conf[key];\n}\n}\n}\n\n};\n\n/**\n* Game Component Snake\n*/\nComponent.Snake = function (canvas, conf) {\n\n// Game Stage\nthis.stage = new Component.Stage(canvas, conf);\n\n// Init Snake\nthis.initSnake = function () {\n\n// Itaration in Snake Conf Size\nfor (var i = 0; i < this.stage.conf.size; i++) { \n    // Add Snake Cells \n    this.stage.length.push({ x: i, y: 0 }); } }; \n// Call init Snake \nthis.initSnake(); \n// Init Food \nthis.initFood=function () { \n    // Add food on stage \n    this.stage.food={ x:\n    Math.round(Math.random() * (this.stage.width - this.stage.conf.cw) / this.stage.conf.cw), y:\n    Math.round(Math.random() * (this.stage.height - this.stage.conf.cw) / this.stage.conf.cw), \n    };\n}; \n    // Init Food\n    this.initFood(); \n    // Restart Stage \n    this.restart=function () { this.stage.length=[]; this.stage.food={};\n    this.stage.score=0; this.stage.direction='right' ; this.stage.keyEvent.pressKey=null; this.initSnake();\n    this.initFood(); }; \n    }; \n    /** * Game Draw */ \n    Game.Draw=function (context, snake) { \n    // Draw Stage\n    this.drawStage=function () { \n    // Check Keypress And Set Stage direction \n    var keyPress=snake.stage.keyEvent.getKey();\n    if (typeof (keyPress) !='undefined' ) { snake.stage.direction=keyPress; } \n    // Draw White Stage\n    context.fillStyle=\"white\" ; context.fillRect(0, 0, snake.stage.width, snake.stage.height); \n    // Snake Position \n    var nx=snake.stage.length[0].x; \n    var ny=snake.stage.length[0].y; \n    // Add position by stage direction \n    switch (snake.stage.direction) { \n        case 'right' : nx++; break; \n        case 'left' : nx--; break; \n        case 'up' : ny--; break;\n        case 'down' : ny++; break; \n    } \n    // Check Collision \n    if (this.collision(nx, ny)==true) { snake.restart(); return; } \n    //Logic of Snake food \n    if (nx==snake.stage.food.x && ny==snake.stage.food.y) { var tail={ x: nx, y: ny };\n    snake.stage.score++; snake.initFood(); } else { var tail=snake.stage.length.pop(); tail.x=nx; tail.y=ny; }\n    snake.stage.length.unshift(tail); \n    // Draw Snake \n    for (var i=0; i < snake.stage.length.length; i++) { var\n    cell=snake.stage.length[i]; this.drawCell(cell.x, cell.y); } \n    // Draw Food \n    this.drawCell(snake.stage.food.x, snake.stage.food.y); \n    // Draw Score \n    context.fillText('Score: ' + snake.stage.score, 5, (snake.stage.height - 5));\n  };\n\n  // Draw Cell\n  this.drawCell = function (x, y) {\n    context.fillStyle = ' rgb(170, 170, 170)'; \n    context.beginPath(); context.arc((x * snake.stage.conf.cw + 6), (y *\n    snake.stage.conf.cw + 6), 4, 0, 2 * Math.PI, false); context.fill(); }; \n    // Check Collision with walls\n    this.collision=function (nx, ny) { if (nx==-1 || nx==(snake.stage.width / snake.stage.conf.cw) || ny==-1 ||\n    ny==(snake.stage.height / snake.stage.conf.cw)) { return true; } return false; } }; /** * Game Snake */\n    Game.Snake=function (elementId, conf) { \n        // Sets \n        var canvas=document.getElementById(elementId); \n        var context=canvas.getContext(\"2d\"); var snake=new Component.Snake(canvas, conf); var gameDraw=new Game.Draw(context,\n    snake); \n    // Game Interval \n    setInterval(function () { gameDraw.drawStage(); }, snake.stage.conf.fps); }; \n    /** * Window\n    Load */ \n    window.onload=function () { var snake=new Game.Snake('stage', { fps: 100, size: 4 }); };\n    </script>\n</body>\n</html>",
        "x": 380,
        "y": 180,
        "wires": [
            [
                "c113c1a4f09f0fe1"
            ]
        ]
    },
    {
        "id": "c113c1a4f09f0fe1",
        "type": "http response",
        "z": "1b4a4c28bfa23ee8",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 600,
        "y": 180,
        "wires": []
    },
    {
        "id": "5aa82a8f48e5fd13",
        "type": "http in",
        "z": "1b4a4c28bfa23ee8",
        "name": "Load Game Page",
        "url": "/load-game",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 320,
        "wires": [
            [
                "c9b8d21c15076e91"
            ]
        ]
    },
    {
        "id": "c9b8d21c15076e91",
        "type": "template",
        "z": "1b4a4c28bfa23ee8",
        "name": "Load Game Template",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "plain",
        "template": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Load Game</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n            height: 100vh;\n            background-color: #f4f4f4;\n        }\n        button {\n            padding: 10px 20px;\n            margin: 10px;\n            font-size: 18px;\n            border: none;\n            color: white;\n            border-radius: 5px;\n            cursor: pointer;\n        }\n        #start {\n            background-color: #28a745;\n        }\n        #stop {\n            background-color: #dc3545;\n        }\n        #start:hover {\n            background-color: #218838;\n        }\n        #stop:hover {\n            background-color: #c82333;\n        }\n    </style>\n</head>\n<body>\n    <h1>Load Game</h1>\n    <h3 id=\"az\">AZ:us-west-2a</h3>\n    <div id=\"cpu-load\">Fetching CPU Load...</div>\n    <button id=\"start\" onclick=\"startStressTest()\">Start Stress Test</button>\n    <button id=\"stop\" onclick=\"stopStressTest()\">Stop Stress Test</button>\n    <script>\n        let timeout;\n    function startStressTest() {\n        fetch('/start-stress', { method: 'POST' })\n            .then(() => {\n                console.log('Stress test started, will stop automatically after 10 minutes.');\n                timeout = setTimeout(stopStressTest, 10 * 60 * 1000); // 10 minutes timeout\n            })\n            .catch(error => console.log('Error starting stress test:', error.message));\n    }\n    function stopStressTest() {\n        clearTimeout(timeout);\n        fetch('/stop-stress', { method: 'POST' })\n            .then(() => console.log('Stress test stopped.'))\n            .catch(error => console.log('Error stopping stress test:', error.message));\n    }\n    function fetchCpuLoad() {\n        fetch('/cpu-load')\n            .then(response => response.json())\n            .then(data => {\n                document.getElementById('cpu-load').innerText = `Current CPU Load: ${data.cpuLoad}%`;\n            })\n            .catch(error => console.error('Error fetching CPU load:', error));\n    }\n    // Fetch CPU load every 5 seconds\n    setInterval(fetchCpuLoad, 5000);\n    fetchCpuLoad();\n\n    // Function to fetch metadata and update the page\n    function fetchMetadata() {\n    fetch('/ec2-metadata')\n        .then(response => response.json())\n        .then(data => {\n            if (data.availabilityZone) {\n                document.getElementById('az').innerText = `AZ: ${data.availabilityZone}`;\n            }\n            if (data.publicIp) {\n            document.getElementById('public-ip').innerText = `Public IP: ${data.publicIp}`;\n            }\n        })\n        .catch(error => {\n            console.error('Error fetching EC2 metadata:', error);\n        });\n    }\n    \n    // Fetch metadata on page load\n    fetchMetadata();\n    </script>\n</body>\n</html>",
        "x": 390,
        "y": 320,
        "wires": [
            [
                "fea1d5c496b27197"
            ]
        ]
    },
    {
        "id": "fea1d5c496b27197",
        "type": "http response",
        "z": "1b4a4c28bfa23ee8",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 620,
        "y": 320,
        "wires": []
    },
    {
        "id": "0fd1c27211f4b054",
        "type": "http in",
        "z": "1b4a4c28bfa23ee8",
        "name": "CPU Load Endpoint",
        "url": "/cpu-load",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 400,
        "wires": [
            [
                "exec-cpu-load"
            ]
        ]
    },
    {
        "id": "eebf07e65c504234",
        "type": "http response",
        "z": "1b4a4c28bfa23ee8",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 810,
        "y": 400,
        "wires": []
    },
    {
        "id": "237495db1f3ba3c2",
        "type": "http in",
        "z": "1b4a4c28bfa23ee8",
        "name": "Start Stress Test",
        "url": "/start-stress",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 560,
        "wires": [
            [
                "772367c4cdf6f775"
            ]
        ]
    },
    {
        "id": "772367c4cdf6f775",
        "type": "function",
        "z": "1b4a4c28bfa23ee8",
        "name": "Start Stress Logic",
        "func": "// Save the running state to the context\ncontext.set('stressTestRunning', true);\n\n// Send the shell command to the exec node\nmsg.payload = \"stress --cpu 2 --io 2 --timeout 300s\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 560,
        "wires": [
            [
                "8b5422b55c7e874b"
            ]
        ]
    },
    {
        "id": "8b5422b55c7e874b",
        "type": "exec",
        "z": "1b4a4c28bfa23ee8",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Execute Stress Command",
        "x": 630,
        "y": 580,
        "wires": [
            [
                "b21fe105abcd3f44",
                "e74269b2fb167d4b"
            ],
            [
                "111b47309fc5e94b"
            ],
            [
                "e07428b5acf3eb6f"
            ]
        ]
    },
    {
        "id": "e74269b2fb167d4b",
        "type": "http response",
        "z": "1b4a4c28bfa23ee8",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 850,
        "y": 500,
        "wires": []
    },
    {
        "id": "b21fe105abcd3f44",
        "type": "debug",
        "z": "1b4a4c28bfa23ee8",
        "name": "Command Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 540,
        "wires": []
    },
    {
        "id": "111b47309fc5e94b",
        "type": "debug",
        "z": "1b4a4c28bfa23ee8",
        "name": "Command Errors",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 580,
        "wires": []
    },
    {
        "id": "e07428b5acf3eb6f",
        "type": "debug",
        "z": "1b4a4c28bfa23ee8",
        "name": "Exit Code",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 620,
        "wires": []
    },
    {
        "id": "0c9086fd0cei2371",
        "type": "http in",
        "z": "1b4a4c28bfa23ee8",
        "name": "Stop Stress Test",
        "url": "/stop-stress",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 620,
        "wires": [
            [
                "bf7c25828b495613"
            ]
        ]
    },
    {
        "id": "bf7c25828b495613",
        "type": "function",
        "z": "1b4a4c28bfa23ee8",
        "name": "Stop Stress Logic",
        "func": "// Kill the stress process by running 'pkill stress'\nmsg.payload = \"pkill stress\";\ncontext.set('stressTestRunning', false);\nnode.status({ fill: \"red\", shape: \"dot\", text: \"Stress command stopped\" });\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 620,
        "wires": [
            [
                "8b5422b55c7e874b"
            ]
        ]
    },
    {
        "id": "ec2-metadata",
        "type": "http in",
        "z": "1b4a4c28bfa23ee8",
        "name": "EC2 Metadata Endpoint",
        "url": "/ec2-metadata",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 740,
        "wires": [
            [
                "fetch-metadata"
            ]
        ]
    },
    {
        "id": "fetch-metadata",
        "type": "function",
        "z": "1b4a4c28bfa23ee8",
        "name": "Get EC2 Metadata",
        "func": "const http = require('http');\n\n// Function to fetch a token\nfunction fetchToken(callback) {\n    const options = {\n        hostname: '169.254.169.254',\n        port: 80,\n        path: '/latest/api/token',\n        method: 'PUT',\n        headers: {\n            'X-aws-ec2-metadata-token-ttl-seconds': '21600' // Token valid for 6 hours\n        }\n    };\n\n    const req = http.request(options, (res) => {\n        let token = '';\n\n        res.on('data', (chunk) => {\n            token += chunk;\n        });\n\n        res.on('end', () => {\n            callback(null, token);\n        });\n    });\n\n    req.on('error', (error) => {\n        callback(error);\n    });\n\n    req.end();\n}\n\n// Function to fetch metadata\nfunction fetchMetadata(path, token, callback) {\n    const options = {\n        hostname: '169.254.169.254',\n        port: 80,\n        path: `/latest/meta-data/${path}`,\n        method: 'GET',\n        headers: {\n            'X-aws-ec2-metadata-token': token\n        }\n    };\n\n    const req = http.request(options, (res) => {\n        let data = '';\n\n        res.on('data', (chunk) => {\n            data += chunk;\n        });\n\n        res.on('end', () => {\n            callback(null, data);\n        });\n    });\n\n    req.on('error', (error) => {\n        callback(error);\n    });\n\n    req.end();\n}\n\n// Fetch the token and metadata sequentially\nfetchToken((error, token) => {\n    if (error) {\n        node.error('Error fetching IMDSv2 token: ' + error.message);\n        msg.payload = { error: 'Failed to fetch metadata token' };\n        return node.send(msg);\n    }\n\n    // Fetch the availability zone\n    fetchMetadata('placement/availability-zone', token, (error, az) => {\n        if (error) {\n            node.error('Error fetching availability zone: ' + error.message);\n            msg.payload = { error: 'Failed to fetch availability zone' };\n            return node.send(msg);\n        }\n\n        // Fetch the public IP\n        fetchMetadata('public-ipv4', token, (error, ip) => {\n            if (error) {\n                node.error('Error fetching public IP: ' + error.message);\n                msg.payload = { error: 'Failed to fetch public IP' };\n                return node.send(msg);\n            }\n\n            // Send the metadata in the payload\n            msg.payload = {\n                availabilityZone: az,\n                publicIp: ip\n            };\n            node.send(msg);\n        });\n    });\n});",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 740,
        "wires": [
            [
                "ec2-metadata-response"
            ]
        ]
    },
    {
        "id": "ec2-metadata-response",
        "type": "http response",
        "z": "1b4a4c28bfa23ee8",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 620,
        "y": 740,
        "wires": []
    },
    {
        "id": "exec-cpu-load",
        "type": "exec",
        "z": "1b4a4c28bfa23ee8",
        "command": "top -bn1 | grep 'Cpu(s)' | sed 's/.*, *\\([0-9.]*\\)%* id.*/\\1/' | awk '{print 100 - $1}'",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Fetch CPU Load",
        "x": 390,
        "y": 400,
        "wires": [
            [
                "format-cpu-response"
            ],
            [],
            []
        ]
    },
    {
        "id": "format-cpu-response",
        "type": "function",
        "z": "1b4a4c28bfa23ee8",
        "name": "Format CPU Data",
        "func": "msg.payload = {\n    cpuLoad: msg.payload.trim()\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 400,
        "wires": [
            [
                "eebf07e65c504234"
            ]
        ]
    }
]